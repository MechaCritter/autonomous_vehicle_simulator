// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sensor_data.proto
// Protobuf C++ Version: 6.30.0

#include "sensor_data.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sensor_data {

inline constexpr LidarScan2D::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ranges_{},
        angle_min_{0},
        angle_increment_{0},
        max_range_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LidarScan2D::LidarScan2D(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(LidarScan2D_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LidarScan2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LidarScan2DDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LidarScan2DDefaultTypeInternal() {}
  union {
    LidarScan2D _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LidarScan2DDefaultTypeInternal _LidarScan2D_default_instance_;

inline constexpr Header::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sensor_id_{0u},
        sensor_type_{static_cast< ::sensor_data::SensorType >(0)},
        timestamp_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR Header::Header(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Header_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;

inline constexpr SensorData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        data_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR SensorData::SensorData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SensorData_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SensorDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorDataDefaultTypeInternal() {}
  union {
    SensorData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorDataDefaultTypeInternal _SensorData_default_instance_;
}  // namespace sensor_data
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_sensor_5fdata_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_sensor_5fdata_2eproto = nullptr;
const ::uint32_t
    TableStruct_sensor_5fdata_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::sensor_data::Header, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::sensor_data::Header, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::sensor_data::Header, _impl_.sensor_id_),
        PROTOBUF_FIELD_OFFSET(::sensor_data::Header, _impl_.sensor_type_),
        PROTOBUF_FIELD_OFFSET(::sensor_data::Header, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::sensor_data::Header, _impl_.timestamp_),
        1,
        2,
        0,
        3,
        PROTOBUF_FIELD_OFFSET(::sensor_data::LidarScan2D, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::sensor_data::LidarScan2D, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::sensor_data::LidarScan2D, _impl_.ranges_),
        PROTOBUF_FIELD_OFFSET(::sensor_data::LidarScan2D, _impl_.angle_min_),
        PROTOBUF_FIELD_OFFSET(::sensor_data::LidarScan2D, _impl_.angle_increment_),
        PROTOBUF_FIELD_OFFSET(::sensor_data::LidarScan2D, _impl_.max_range_),
        ~0u,
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::sensor_data::SensorData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::sensor_data::SensorData, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::sensor_data::SensorData, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::sensor_data::SensorData, _impl_.header_),
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::sensor_data::SensorData, _impl_.data_),
        0,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::sensor_data::Header)},
        {16, 28, -1, sizeof(::sensor_data::LidarScan2D)},
        {32, 43, -1, sizeof(::sensor_data::SensorData)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::sensor_data::_Header_default_instance_._instance,
    &::sensor_data::_LidarScan2D_default_instance_._instance,
    &::sensor_data::_SensorData_default_instance_._instance,
};
const char descriptor_table_protodef_sensor_5fdata_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021sensor_data.proto\022\013sensor_data\"j\n\006Head"
    "er\022\021\n\tsensor_id\030\001 \001(\r\022,\n\013sensor_type\030\002 \001"
    "(\0162\027.sensor_data.SensorType\022\014\n\004name\030\003 \001("
    "\t\022\021\n\ttimestamp\030\004 \001(\004\"\\\n\013LidarScan2D\022\016\n\006r"
    "anges\030\001 \003(\001\022\021\n\tangle_min\030\002 \001(\001\022\027\n\017angle_"
    "increment\030\003 \001(\001\022\021\n\tmax_range\030\004 \001(\001\"l\n\nSe"
    "nsorData\022#\n\006header\030\001 \001(\0132\023.sensor_data.H"
    "eader\0221\n\rlidar_scan_2d\030\002 \001(\0132\030.sensor_da"
    "ta.LidarScan2DH\000B\006\n\004data*G\n\nSensorType\022\013"
    "\n\007LIDAR2D\020\000\022\014\n\010ODOMETER\020\001\022\007\n\003IMU\020\002\022\007\n\003GP"
    "S\020\003\022\014\n\010CAMERA2D\020\004b\006proto3"
};
static ::absl::once_flag descriptor_table_sensor_5fdata_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_sensor_5fdata_2eproto = {
    false,
    false,
    425,
    descriptor_table_protodef_sensor_5fdata_2eproto,
    "sensor_data.proto",
    &descriptor_table_sensor_5fdata_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_sensor_5fdata_2eproto::offsets,
    file_level_enum_descriptors_sensor_5fdata_2eproto,
    file_level_service_descriptors_sensor_5fdata_2eproto,
};
namespace sensor_data {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL SensorType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sensor_5fdata_2eproto);
  return file_level_enum_descriptors_sensor_5fdata_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t SensorType_internal_data_[] = {
    327680u, 0u, };
// ===================================================================

class Header::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Header>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_);
};

Header::Header(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Header_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensor_data.Header)
}
PROTOBUF_NDEBUG_INLINE Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensor_data::Header& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

Header::Header(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Header& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Header_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Header* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sensor_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, sensor_id_),
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, sensor_id_) +
               sizeof(Impl_::timestamp_));

  // @@protoc_insertion_point(copy_constructor:sensor_data.Header)
}
PROTOBUF_NDEBUG_INLINE Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        name_(arena) {}

inline void Header::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sensor_id_),
           0,
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, sensor_id_) +
               sizeof(Impl_::timestamp_));
}
Header::~Header() {
  // @@protoc_insertion_point(destructor:sensor_data.Header)
  SharedDtor(*this);
}
inline void Header::SharedDtor(MessageLite& self) {
  Header& this_ = static_cast<Header&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Header::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Header(arena);
}
constexpr auto Header::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Header),
                                            alignof(Header));
}
constexpr auto Header::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Header_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Header::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Header>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Header::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Header>(), &Header::ByteSizeLong,
              &Header::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Header, _impl_._cached_size_),
          false,
      },
      &Header::kDescriptorMethods,
      &descriptor_table_sensor_5fdata_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        Header_class_data_ =
            Header::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL Header::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Header_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Header_class_data_.tc_table);
  return Header_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 31, 2>
Header::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Header_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensor_data::Header>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint64 timestamp = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Header, _impl_.timestamp_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.timestamp_)}},
    // uint32 sensor_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Header, _impl_.sensor_id_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.sensor_id_)}},
    // .sensor_data.SensorType sensor_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Header, _impl_.sensor_type_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.sensor_type_)}},
    // string name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 sensor_id = 1;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.sensor_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .sensor_data.SensorType sensor_type = 2;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.sensor_type_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string name = 3;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.timestamp_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
    "\22\0\0\4\0\0\0\0"
    "sensor_data.Header"
    "name"
  }},
};
PROTOBUF_NOINLINE void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_data.Header)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000000eu) != 0) {
    ::memset(&_impl_.sensor_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Header::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Header& this_ = static_cast<const Header&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Header::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Header& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensor_data.Header)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 sensor_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_sensor_id() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_sensor_id(), target);
    }
  }

  // .sensor_data.SensorType sensor_type = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_sensor_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_sensor_type(), target);
    }
  }

  // string name = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_name().empty()) {
      const std::string& _s = this_._internal_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "sensor_data.Header.name");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // uint64 timestamp = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_timestamp() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          4, this_._internal_timestamp(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_data.Header)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Header::ByteSizeLong(const MessageLite& base) {
  const Header& this_ = static_cast<const Header&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Header::ByteSizeLong() const {
  const Header& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensor_data.Header)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // string name = 3;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_name());
      }
    }
    // uint32 sensor_id = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_sensor_id() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_sensor_id());
      }
    }
    // .sensor_data.SensorType sensor_type = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_sensor_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_sensor_type());
      }
    }
    // uint64 timestamp = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_timestamp());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Header::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensor_data.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_name().empty()) {
        _this->_internal_set_name(from._internal_name());
      } else {
        if (_this->_impl_.name_.IsDefault()) {
          _this->_internal_set_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_sensor_id() != 0) {
        _this->_impl_.sensor_id_ = from._impl_.sensor_id_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_sensor_type() != 0) {
        _this->_impl_.sensor_type_ = from._impl_.sensor_type_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_timestamp() != 0) {
        _this->_impl_.timestamp_ = from._impl_.timestamp_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_data.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Header::InternalSwap(Header* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.timestamp_)
      + sizeof(Header::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.sensor_id_)>(
          reinterpret_cast<char*>(&_impl_.sensor_id_),
          reinterpret_cast<char*>(&other->_impl_.sensor_id_));
}

::google::protobuf::Metadata Header::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LidarScan2D::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LidarScan2D>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LidarScan2D, _impl_._has_bits_);
};

LidarScan2D::LidarScan2D(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LidarScan2D_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensor_data.LidarScan2D)
}
PROTOBUF_NDEBUG_INLINE LidarScan2D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensor_data::LidarScan2D& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ranges_{visibility, arena, from.ranges_} {}

LidarScan2D::LidarScan2D(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const LidarScan2D& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LidarScan2D_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LidarScan2D* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, angle_min_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, angle_min_),
           offsetof(Impl_, max_range_) -
               offsetof(Impl_, angle_min_) +
               sizeof(Impl_::max_range_));

  // @@protoc_insertion_point(copy_constructor:sensor_data.LidarScan2D)
}
PROTOBUF_NDEBUG_INLINE LidarScan2D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        ranges_{visibility, arena} {}

inline void LidarScan2D::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, angle_min_),
           0,
           offsetof(Impl_, max_range_) -
               offsetof(Impl_, angle_min_) +
               sizeof(Impl_::max_range_));
}
LidarScan2D::~LidarScan2D() {
  // @@protoc_insertion_point(destructor:sensor_data.LidarScan2D)
  SharedDtor(*this);
}
inline void LidarScan2D::SharedDtor(MessageLite& self) {
  LidarScan2D& this_ = static_cast<LidarScan2D&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL LidarScan2D::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) LidarScan2D(arena);
}
constexpr auto LidarScan2D::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(LidarScan2D, _impl_.ranges_) +
          decltype(LidarScan2D::_impl_.ranges_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(LidarScan2D), alignof(LidarScan2D), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&LidarScan2D::PlacementNew_,
                                 sizeof(LidarScan2D),
                                 alignof(LidarScan2D));
  }
}
constexpr auto LidarScan2D::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_LidarScan2D_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &LidarScan2D::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<LidarScan2D>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &LidarScan2D::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<LidarScan2D>(), &LidarScan2D::ByteSizeLong,
              &LidarScan2D::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(LidarScan2D, _impl_._cached_size_),
          false,
      },
      &LidarScan2D::kDescriptorMethods,
      &descriptor_table_sensor_5fdata_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        LidarScan2D_class_data_ =
            LidarScan2D::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL LidarScan2D::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&LidarScan2D_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(LidarScan2D_class_data_.tc_table);
  return LidarScan2D_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2>
LidarScan2D::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LidarScan2D, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    LidarScan2D_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensor_data::LidarScan2D>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double max_range = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 2, 0, PROTOBUF_FIELD_OFFSET(LidarScan2D, _impl_.max_range_)}},
    // repeated double ranges = 1;
    {::_pbi::TcParser::FastF64P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LidarScan2D, _impl_.ranges_)}},
    // double angle_min = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 0, 0, PROTOBUF_FIELD_OFFSET(LidarScan2D, _impl_.angle_min_)}},
    // double angle_increment = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 1, 0, PROTOBUF_FIELD_OFFSET(LidarScan2D, _impl_.angle_increment_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated double ranges = 1;
    {PROTOBUF_FIELD_OFFSET(LidarScan2D, _impl_.ranges_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // double angle_min = 2;
    {PROTOBUF_FIELD_OFFSET(LidarScan2D, _impl_.angle_min_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double angle_increment = 3;
    {PROTOBUF_FIELD_OFFSET(LidarScan2D, _impl_.angle_increment_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double max_range = 4;
    {PROTOBUF_FIELD_OFFSET(LidarScan2D, _impl_.max_range_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void LidarScan2D::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_data.LidarScan2D)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ranges_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    ::memset(&_impl_.angle_min_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.max_range_) -
        reinterpret_cast<char*>(&_impl_.angle_min_)) + sizeof(_impl_.max_range_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL LidarScan2D::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const LidarScan2D& this_ = static_cast<const LidarScan2D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL LidarScan2D::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const LidarScan2D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensor_data.LidarScan2D)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated double ranges = 1;
  if (this_._internal_ranges_size() > 0) {
    target = stream->WriteFixedPacked(1, this_._internal_ranges(), target);
  }

  // double angle_min = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_angle_min()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          2, this_._internal_angle_min(), target);
    }
  }

  // double angle_increment = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_angle_increment()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this_._internal_angle_increment(), target);
    }
  }

  // double max_range = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_max_range()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          4, this_._internal_max_range(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_data.LidarScan2D)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t LidarScan2D::ByteSizeLong(const MessageLite& base) {
  const LidarScan2D& this_ = static_cast<const LidarScan2D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t LidarScan2D::ByteSizeLong() const {
  const LidarScan2D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensor_data.LidarScan2D)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated double ranges = 1;
    {
      std::size_t data_size = std::size_t{8} *
          ::_pbi::FromIntSize(this_._internal_ranges_size());
      std::size_t tag_size = data_size == 0
          ? 0
          : 1 + ::_pbi::WireFormatLite::Int32Size(
                              static_cast<::int32_t>(data_size));
      total_size += tag_size + data_size;
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // double angle_min = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_angle_min()) != 0) {
        total_size += 9;
      }
    }
    // double angle_increment = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_angle_increment()) != 0) {
        total_size += 9;
      }
    }
    // double max_range = 4;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_max_range()) != 0) {
        total_size += 9;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void LidarScan2D::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LidarScan2D*>(&to_msg);
  auto& from = static_cast<const LidarScan2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sensor_data.LidarScan2D)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ranges()->MergeFrom(from._internal_ranges());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_angle_min()) != 0) {
        _this->_impl_.angle_min_ = from._impl_.angle_min_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_angle_increment()) != 0) {
        _this->_impl_.angle_increment_ = from._impl_.angle_increment_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_max_range()) != 0) {
        _this->_impl_.max_range_ = from._impl_.max_range_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LidarScan2D::CopyFrom(const LidarScan2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_data.LidarScan2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LidarScan2D::InternalSwap(LidarScan2D* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ranges_.InternalSwap(&other->_impl_.ranges_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LidarScan2D, _impl_.max_range_)
      + sizeof(LidarScan2D::_impl_.max_range_)
      - PROTOBUF_FIELD_OFFSET(LidarScan2D, _impl_.angle_min_)>(
          reinterpret_cast<char*>(&_impl_.angle_min_),
          reinterpret_cast<char*>(&other->_impl_.angle_min_));
}

::google::protobuf::Metadata LidarScan2D::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SensorData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SensorData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SensorData, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::sensor_data::SensorData, _impl_._oneof_case_);
};

void SensorData::set_allocated_lidar_scan_2d(::sensor_data::LidarScan2D* PROTOBUF_NULLABLE lidar_scan_2d) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (lidar_scan_2d) {
    ::google::protobuf::Arena* submessage_arena = lidar_scan_2d->GetArena();
    if (message_arena != submessage_arena) {
      lidar_scan_2d = ::google::protobuf::internal::GetOwnedMessage(message_arena, lidar_scan_2d, submessage_arena);
    }
    set_has_lidar_scan_2d();
    _impl_.data_.lidar_scan_2d_ = lidar_scan_2d;
  }
  // @@protoc_insertion_point(field_set_allocated:sensor_data.SensorData.lidar_scan_2d)
}
SensorData::SensorData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SensorData_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensor_data.SensorData)
}
PROTOBUF_NDEBUG_INLINE SensorData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::sensor_data::SensorData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        data_{},
        _oneof_case_{from._oneof_case_[0]} {}

SensorData::SensorData(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SensorData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SensorData_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SensorData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.header_)
                : nullptr;
  switch (data_case()) {
    case DATA_NOT_SET:
      break;
      case kLidarScan2D:
        _impl_.data_.lidar_scan_2d_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.data_.lidar_scan_2d_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:sensor_data.SensorData)
}
PROTOBUF_NDEBUG_INLINE SensorData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        data_{},
        _oneof_case_{} {}

inline void SensorData::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.header_ = {};
}
SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:sensor_data.SensorData)
  SharedDtor(*this);
}
inline void SensorData::SharedDtor(MessageLite& self) {
  SensorData& this_ = static_cast<SensorData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  if (this_.has_data()) {
    this_.clear_data();
  }
  this_._impl_.~Impl_();
}

void SensorData::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:sensor_data.SensorData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (data_case()) {
    case kLidarScan2D: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.lidar_scan_2d_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.lidar_scan_2d_);
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


inline void* PROTOBUF_NONNULL SensorData::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SensorData(arena);
}
constexpr auto SensorData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SensorData),
                                            alignof(SensorData));
}
constexpr auto SensorData::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SensorData_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SensorData::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SensorData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SensorData::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SensorData>(), &SensorData::ByteSizeLong,
              &SensorData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SensorData, _impl_._cached_size_),
          false,
      },
      &SensorData::kDescriptorMethods,
      &descriptor_table_sensor_5fdata_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SensorData_class_data_ =
            SensorData::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SensorData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SensorData_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SensorData_class_data_.tc_table);
  return SensorData_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2>
SensorData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SensorData, _impl_._has_bits_),
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SensorData_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sensor_data::SensorData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .sensor_data.Header header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SensorData, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .sensor_data.Header header = 1;
    {PROTOBUF_FIELD_OFFSET(SensorData, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .sensor_data.LidarScan2D lidar_scan_2d = 2;
    {PROTOBUF_FIELD_OFFSET(SensorData, _impl_.data_.lidar_scan_2d_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::sensor_data::Header>()},
      {::_pbi::TcParser::GetTable<::sensor_data::LidarScan2D>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_data.SensorData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  clear_data();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SensorData::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SensorData& this_ = static_cast<const SensorData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SensorData::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SensorData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:sensor_data.SensorData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .sensor_data.Header header = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
        stream);
  }

  // .sensor_data.LidarScan2D lidar_scan_2d = 2;
  if (this_.data_case() == kLidarScan2D) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.data_.lidar_scan_2d_, this_._impl_.data_.lidar_scan_2d_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_data.SensorData)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SensorData::ByteSizeLong(const MessageLite& base) {
  const SensorData& this_ = static_cast<const SensorData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SensorData::ByteSizeLong() const {
  const SensorData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:sensor_data.SensorData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .sensor_data.Header header = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
    }
  }
  switch (this_.data_case()) {
    // .sensor_data.LidarScan2D lidar_scan_2d = 2;
    case kLidarScan2D: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.lidar_scan_2d_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SensorData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SensorData*>(&to_msg);
  auto& from = static_cast<const SensorData&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:sensor_data.SensorData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.header_ != nullptr);
    if (_this->_impl_.header_ == nullptr) {
      _this->_impl_.header_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.header_);
    } else {
      _this->_impl_.header_->MergeFrom(*from._impl_.header_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_data();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kLidarScan2D: {
        if (oneof_needs_init) {
          _this->_impl_.data_.lidar_scan_2d_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.data_.lidar_scan_2d_);
        } else {
          _this->_impl_.data_.lidar_scan_2d_->MergeFrom(*from._impl_.data_.lidar_scan_2d_);
        }
        break;
      }
      case DATA_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_data.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SensorData::InternalSwap(SensorData* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.header_, other->_impl_.header_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata SensorData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace sensor_data
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_sensor_5fdata_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
