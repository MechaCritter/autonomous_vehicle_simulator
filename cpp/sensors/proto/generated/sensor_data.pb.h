// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sensor_data.proto
// Protobuf C++ Version: 6.30.0

#ifndef sensor_5fdata_2eproto_2epb_2eh
#define sensor_5fdata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensor_5fdata_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensor_5fdata_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_sensor_5fdata_2eproto;
}  // extern "C"
namespace sensor_data {
enum SensorType : int;
extern const uint32_t SensorType_internal_data_[];
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Header_class_data_;
class LidarScan2D;
struct LidarScan2DDefaultTypeInternal;
extern LidarScan2DDefaultTypeInternal _LidarScan2D_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull LidarScan2D_class_data_;
class SensorData;
struct SensorDataDefaultTypeInternal;
extern SensorDataDefaultTypeInternal _SensorData_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SensorData_class_data_;
}  // namespace sensor_data
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::sensor_data::SensorType_internal_data_>
    internal::EnumTraitsImpl::value<::sensor_data::SensorType>;
}  // namespace protobuf
}  // namespace google

namespace sensor_data {
enum SensorType : int {
  LIDAR2D = 0,
  ODOMETER = 1,
  IMU = 2,
  GPS = 3,
  CAMERA2D = 4,
  SensorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SensorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t SensorType_internal_data_[];
inline constexpr SensorType SensorType_MIN =
    static_cast<SensorType>(0);
inline constexpr SensorType SensorType_MAX =
    static_cast<SensorType>(4);
inline bool SensorType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
inline constexpr int SensorType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL SensorType_descriptor();
template <typename T>
const std::string& SensorType_Name(T value) {
  static_assert(std::is_same<T, SensorType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SensorType_Name().");
  return SensorType_Name(static_cast<SensorType>(value));
}
template <>
inline const std::string& SensorType_Name(SensorType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SensorType_descriptor, 0, 4>(
      static_cast<int>(value));
}
inline bool SensorType_Parse(
    absl::string_view name, SensorType* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorType>(SensorType_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class LidarScan2D final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensor_data.LidarScan2D) */ {
 public:
  inline LidarScan2D() : LidarScan2D(nullptr) {}
  ~LidarScan2D() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LidarScan2D* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LidarScan2D));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LidarScan2D(::google::protobuf::internal::ConstantInitialized);

  inline LidarScan2D(const LidarScan2D& from) : LidarScan2D(nullptr, from) {}
  inline LidarScan2D(LidarScan2D&& from) noexcept
      : LidarScan2D(nullptr, std::move(from)) {}
  inline LidarScan2D& operator=(const LidarScan2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarScan2D& operator=(LidarScan2D&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LidarScan2D& default_instance() {
    return *reinterpret_cast<const LidarScan2D*>(
        &_LidarScan2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(LidarScan2D& a, LidarScan2D& b) { a.Swap(&b); }
  inline void Swap(LidarScan2D* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LidarScan2D* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LidarScan2D* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LidarScan2D>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LidarScan2D& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LidarScan2D& from) { LidarScan2D::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LidarScan2D* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensor_data.LidarScan2D"; }

 protected:
  explicit LidarScan2D(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  LidarScan2D(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const LidarScan2D& from);
  LidarScan2D(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, LidarScan2D&& from) noexcept
      : LidarScan2D(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRangesFieldNumber = 1,
    kAngleMinFieldNumber = 2,
    kAngleIncrementFieldNumber = 3,
    kMaxRangeFieldNumber = 4,
  };
  // repeated double ranges = 1;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;

  public:
  void clear_ranges() ;
  double ranges(int index) const;
  void set_ranges(int index, double value);
  void add_ranges(double value);
  const ::google::protobuf::RepeatedField<double>& ranges() const;
  ::google::protobuf::RepeatedField<double>* PROTOBUF_NONNULL mutable_ranges();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_ranges() const;
  ::google::protobuf::RepeatedField<double>* PROTOBUF_NONNULL _internal_mutable_ranges();

  public:
  // double angle_min = 2;
  void clear_angle_min() ;
  double angle_min() const;
  void set_angle_min(double value);

  private:
  double _internal_angle_min() const;
  void _internal_set_angle_min(double value);

  public:
  // double angle_increment = 3;
  void clear_angle_increment() ;
  double angle_increment() const;
  void set_angle_increment(double value);

  private:
  double _internal_angle_increment() const;
  void _internal_set_angle_increment(double value);

  public:
  // double max_range = 4;
  void clear_max_range() ;
  double max_range() const;
  void set_max_range(double value);

  private:
  double _internal_max_range() const;
  void _internal_set_max_range(double value);

  public:
  // @@protoc_insertion_point(class_scope:sensor_data.LidarScan2D)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const LidarScan2D& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<double> ranges_;
    double angle_min_;
    double angle_increment_;
    double max_range_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fdata_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull LidarScan2D_class_data_;
// -------------------------------------------------------------------

class Header final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensor_data.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Header* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Header));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Header(::google::protobuf::internal::ConstantInitialized);

  inline Header(const Header& from) : Header(nullptr, from) {}
  inline Header(Header&& from) noexcept
      : Header(nullptr, std::move(from)) {}
  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *reinterpret_cast<const Header*>(
        &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Header& a, Header& b) { a.Swap(&b); }
  inline void Swap(Header* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Header>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Header& from) { Header::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Header* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensor_data.Header"; }

 protected:
  explicit Header(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Header(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Header& from);
  Header(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Header&& from) noexcept
      : Header(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 3,
    kSensorIdFieldNumber = 1,
    kSensorTypeFieldNumber = 2,
    kTimestampFieldNumber = 4,
  };
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_name();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_name();
  void set_allocated_name(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_name();

  public:
  // uint32 sensor_id = 1;
  void clear_sensor_id() ;
  ::uint32_t sensor_id() const;
  void set_sensor_id(::uint32_t value);

  private:
  ::uint32_t _internal_sensor_id() const;
  void _internal_set_sensor_id(::uint32_t value);

  public:
  // .sensor_data.SensorType sensor_type = 2;
  void clear_sensor_type() ;
  ::sensor_data::SensorType sensor_type() const;
  void set_sensor_type(::sensor_data::SensorType value);

  private:
  ::sensor_data::SensorType _internal_sensor_type() const;
  void _internal_set_sensor_type(::sensor_data::SensorType value);

  public:
  // uint64 timestamp = 4;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:sensor_data.Header)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   0, 31,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Header& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::uint32_t sensor_id_;
    int sensor_type_;
    ::uint64_t timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fdata_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Header_class_data_;
// -------------------------------------------------------------------

class SensorData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sensor_data.SensorData) */ {
 public:
  inline SensorData() : SensorData(nullptr) {}
  ~SensorData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SensorData* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SensorData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SensorData(::google::protobuf::internal::ConstantInitialized);

  inline SensorData(const SensorData& from) : SensorData(nullptr, from) {}
  inline SensorData(SensorData&& from) noexcept
      : SensorData(nullptr, std::move(from)) {}
  inline SensorData& operator=(const SensorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorData& operator=(SensorData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorData& default_instance() {
    return *reinterpret_cast<const SensorData*>(
        &_SensorData_default_instance_);
  }
  enum DataCase {
    kLidarScan2D = 2,
    DATA_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SensorData& a, SensorData& b) { a.Swap(&b); }
  inline void Swap(SensorData* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorData* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorData* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SensorData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SensorData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SensorData& from) { SensorData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SensorData* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sensor_data.SensorData"; }

 protected:
  explicit SensorData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SensorData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SensorData& from);
  SensorData(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SensorData&& from) noexcept
      : SensorData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kLidarScan2DFieldNumber = 2,
  };
  // .sensor_data.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::sensor_data::Header& header() const;
  [[nodiscard]] ::sensor_data::Header* PROTOBUF_NULLABLE release_header();
  ::sensor_data::Header* PROTOBUF_NONNULL mutable_header();
  void set_allocated_header(::sensor_data::Header* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_header(::sensor_data::Header* PROTOBUF_NULLABLE value);
  ::sensor_data::Header* PROTOBUF_NULLABLE unsafe_arena_release_header();

  private:
  const ::sensor_data::Header& _internal_header() const;
  ::sensor_data::Header* PROTOBUF_NONNULL _internal_mutable_header();

  public:
  // .sensor_data.LidarScan2D lidar_scan_2d = 2;
  bool has_lidar_scan_2d() const;
  private:
  bool _internal_has_lidar_scan_2d() const;

  public:
  void clear_lidar_scan_2d() ;
  const ::sensor_data::LidarScan2D& lidar_scan_2d() const;
  [[nodiscard]] ::sensor_data::LidarScan2D* PROTOBUF_NULLABLE release_lidar_scan_2d();
  ::sensor_data::LidarScan2D* PROTOBUF_NONNULL mutable_lidar_scan_2d();
  void set_allocated_lidar_scan_2d(::sensor_data::LidarScan2D* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_lidar_scan_2d(::sensor_data::LidarScan2D* PROTOBUF_NULLABLE value);
  ::sensor_data::LidarScan2D* PROTOBUF_NULLABLE unsafe_arena_release_lidar_scan_2d();

  private:
  const ::sensor_data::LidarScan2D& _internal_lidar_scan_2d() const;
  ::sensor_data::LidarScan2D* PROTOBUF_NONNULL _internal_mutable_lidar_scan_2d();

  public:
  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:sensor_data.SensorData)
 private:
  class _Internal;
  void set_has_lidar_scan_2d();
  inline bool has_data() const;
  inline void clear_has_data();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SensorData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::sensor_data::Header* PROTOBUF_NULLABLE header_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::sensor_data::LidarScan2D* PROTOBUF_NULLABLE lidar_scan_2d_;
    } data_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fdata_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SensorData_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Header

// uint32 sensor_id = 1;
inline void Header::clear_sensor_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sensor_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Header::sensor_id() const {
  // @@protoc_insertion_point(field_get:sensor_data.Header.sensor_id)
  return _internal_sensor_id();
}
inline void Header::set_sensor_id(::uint32_t value) {
  _internal_set_sensor_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:sensor_data.Header.sensor_id)
}
inline ::uint32_t Header::_internal_sensor_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sensor_id_;
}
inline void Header::_internal_set_sensor_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sensor_id_ = value;
}

// .sensor_data.SensorType sensor_type = 2;
inline void Header::clear_sensor_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sensor_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::sensor_data::SensorType Header::sensor_type() const {
  // @@protoc_insertion_point(field_get:sensor_data.Header.sensor_type)
  return _internal_sensor_type();
}
inline void Header::set_sensor_type(::sensor_data::SensorType value) {
  _internal_set_sensor_type(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:sensor_data.Header.sensor_type)
}
inline ::sensor_data::SensorType Header::_internal_sensor_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::sensor_data::SensorType>(_impl_.sensor_type_);
}
inline void Header::_internal_set_sensor_type(::sensor_data::SensorType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sensor_type_ = value;
}

// string name = 3;
inline void Header::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Header::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor_data.Header.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Header::set_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sensor_data.Header.name)
}
inline std::string* PROTOBUF_NONNULL Header::mutable_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sensor_data.Header.name)
  return _s;
}
inline const std::string& Header::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Header::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Header::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Header::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensor_data.Header.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void Header::set_allocated_name(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sensor_data.Header.name)
}

// uint64 timestamp = 4;
inline void Header::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Header::timestamp() const {
  // @@protoc_insertion_point(field_get:sensor_data.Header.timestamp)
  return _internal_timestamp();
}
inline void Header::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:sensor_data.Header.timestamp)
}
inline ::uint64_t Header::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void Header::_internal_set_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// LidarScan2D

// repeated double ranges = 1;
inline int LidarScan2D::_internal_ranges_size() const {
  return _internal_ranges().size();
}
inline int LidarScan2D::ranges_size() const {
  return _internal_ranges_size();
}
inline void LidarScan2D::clear_ranges() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ranges_.Clear();
}
inline double LidarScan2D::ranges(int index) const {
  // @@protoc_insertion_point(field_get:sensor_data.LidarScan2D.ranges)
  return _internal_ranges().Get(index);
}
inline void LidarScan2D::set_ranges(int index, double value) {
  _internal_mutable_ranges()->Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_data.LidarScan2D.ranges)
}
inline void LidarScan2D::add_ranges(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_ranges()->Add(value);
  // @@protoc_insertion_point(field_add:sensor_data.LidarScan2D.ranges)
}
inline const ::google::protobuf::RepeatedField<double>& LidarScan2D::ranges() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sensor_data.LidarScan2D.ranges)
  return _internal_ranges();
}
inline ::google::protobuf::RepeatedField<double>* PROTOBUF_NONNULL LidarScan2D::mutable_ranges()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sensor_data.LidarScan2D.ranges)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ranges();
}
inline const ::google::protobuf::RepeatedField<double>&
LidarScan2D::_internal_ranges() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ranges_;
}
inline ::google::protobuf::RepeatedField<double>* PROTOBUF_NONNULL
LidarScan2D::_internal_mutable_ranges() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ranges_;
}

// double angle_min = 2;
inline void LidarScan2D::clear_angle_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angle_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double LidarScan2D::angle_min() const {
  // @@protoc_insertion_point(field_get:sensor_data.LidarScan2D.angle_min)
  return _internal_angle_min();
}
inline void LidarScan2D::set_angle_min(double value) {
  _internal_set_angle_min(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:sensor_data.LidarScan2D.angle_min)
}
inline double LidarScan2D::_internal_angle_min() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.angle_min_;
}
inline void LidarScan2D::_internal_set_angle_min(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angle_min_ = value;
}

// double angle_increment = 3;
inline void LidarScan2D::clear_angle_increment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angle_increment_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double LidarScan2D::angle_increment() const {
  // @@protoc_insertion_point(field_get:sensor_data.LidarScan2D.angle_increment)
  return _internal_angle_increment();
}
inline void LidarScan2D::set_angle_increment(double value) {
  _internal_set_angle_increment(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:sensor_data.LidarScan2D.angle_increment)
}
inline double LidarScan2D::_internal_angle_increment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.angle_increment_;
}
inline void LidarScan2D::_internal_set_angle_increment(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angle_increment_ = value;
}

// double max_range = 4;
inline void LidarScan2D::clear_max_range() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_range_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double LidarScan2D::max_range() const {
  // @@protoc_insertion_point(field_get:sensor_data.LidarScan2D.max_range)
  return _internal_max_range();
}
inline void LidarScan2D::set_max_range(double value) {
  _internal_set_max_range(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:sensor_data.LidarScan2D.max_range)
}
inline double LidarScan2D::_internal_max_range() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_range_;
}
inline void LidarScan2D::_internal_set_max_range(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_range_ = value;
}

// -------------------------------------------------------------------

// SensorData

// .sensor_data.Header header = 1;
inline bool SensorData::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline void SensorData::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sensor_data::Header& SensorData::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::sensor_data::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::sensor_data::Header&>(::sensor_data::_Header_default_instance_);
}
inline const ::sensor_data::Header& SensorData::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor_data.SensorData.header)
  return _internal_header();
}
inline void SensorData::unsafe_arena_set_allocated_header(
    ::sensor_data::Header* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::sensor_data::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensor_data.SensorData.header)
}
inline ::sensor_data::Header* PROTOBUF_NULLABLE SensorData::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensor_data::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::sensor_data::Header* PROTOBUF_NULLABLE SensorData::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sensor_data.SensorData.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sensor_data::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::sensor_data::Header* PROTOBUF_NONNULL SensorData::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::sensor_data::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::sensor_data::Header*>(p);
  }
  return _impl_.header_;
}
inline ::sensor_data::Header* PROTOBUF_NONNULL SensorData::mutable_header()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::sensor_data::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:sensor_data.SensorData.header)
  return _msg;
}
inline void SensorData::set_allocated_header(::sensor_data::Header* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::sensor_data::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:sensor_data.SensorData.header)
}

// .sensor_data.LidarScan2D lidar_scan_2d = 2;
inline bool SensorData::has_lidar_scan_2d() const {
  return data_case() == kLidarScan2D;
}
inline bool SensorData::_internal_has_lidar_scan_2d() const {
  return data_case() == kLidarScan2D;
}
inline void SensorData::set_has_lidar_scan_2d() {
  _impl_._oneof_case_[0] = kLidarScan2D;
}
inline void SensorData::clear_lidar_scan_2d() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() == kLidarScan2D) {
    if (GetArena() == nullptr) {
      delete _impl_.data_.lidar_scan_2d_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.lidar_scan_2d_);
    }
    clear_has_data();
  }
}
inline ::sensor_data::LidarScan2D* PROTOBUF_NULLABLE SensorData::release_lidar_scan_2d() {
  // @@protoc_insertion_point(field_release:sensor_data.SensorData.lidar_scan_2d)
  if (data_case() == kLidarScan2D) {
    clear_has_data();
    auto* temp = _impl_.data_.lidar_scan_2d_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.lidar_scan_2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sensor_data::LidarScan2D& SensorData::_internal_lidar_scan_2d() const {
  return data_case() == kLidarScan2D ? *_impl_.data_.lidar_scan_2d_ : reinterpret_cast<::sensor_data::LidarScan2D&>(::sensor_data::_LidarScan2D_default_instance_);
}
inline const ::sensor_data::LidarScan2D& SensorData::lidar_scan_2d() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sensor_data.SensorData.lidar_scan_2d)
  return _internal_lidar_scan_2d();
}
inline ::sensor_data::LidarScan2D* PROTOBUF_NULLABLE SensorData::unsafe_arena_release_lidar_scan_2d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensor_data.SensorData.lidar_scan_2d)
  if (data_case() == kLidarScan2D) {
    clear_has_data();
    auto* temp = _impl_.data_.lidar_scan_2d_;
    _impl_.data_.lidar_scan_2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SensorData::unsafe_arena_set_allocated_lidar_scan_2d(
    ::sensor_data::LidarScan2D* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_data();
  if (value) {
    set_has_lidar_scan_2d();
    _impl_.data_.lidar_scan_2d_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensor_data.SensorData.lidar_scan_2d)
}
inline ::sensor_data::LidarScan2D* PROTOBUF_NONNULL SensorData::_internal_mutable_lidar_scan_2d() {
  if (data_case() != kLidarScan2D) {
    clear_data();
    set_has_lidar_scan_2d();
    _impl_.data_.lidar_scan_2d_ = 
        ::google::protobuf::Message::DefaultConstruct<::sensor_data::LidarScan2D>(GetArena());
  }
  return _impl_.data_.lidar_scan_2d_;
}
inline ::sensor_data::LidarScan2D* PROTOBUF_NONNULL SensorData::mutable_lidar_scan_2d()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sensor_data::LidarScan2D* _msg = _internal_mutable_lidar_scan_2d();
  // @@protoc_insertion_point(field_mutable:sensor_data.SensorData.lidar_scan_2d)
  return _msg;
}

inline bool SensorData::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void SensorData::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline SensorData::DataCase SensorData::data_case() const {
  return SensorData::DataCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace sensor_data


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::sensor_data::SensorType> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::sensor_data::SensorType>() {
  return ::sensor_data::SensorType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // sensor_5fdata_2eproto_2epb_2eh
